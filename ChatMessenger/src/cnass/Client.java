/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnass;

import static cnass.Server.dataOutputStream;
import static cnass.Server.port;
import static cnass.Server.serverSocket;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Murtaza
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    static ServerSocket serverSocket;
    static Socket socket;    
    static DataInputStream dataInputStream;
    static DataOutputStream dataOutputStream;
    static int port;
    static String IP;
   
    
    
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Send_Button_Client = new javax.swing.JButton();
        Send_Msg_Field_Client = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Client_Area = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        Port_IP_Field_Client = new javax.swing.JTextField();
        Status_Field = new javax.swing.JTextField();
        Establish_Connection_Button = new javax.swing.JButton();
        Port_Details_Field = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");

        Send_Button_Client.setText("Send");
        Send_Button_Client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_Button_ClientActionPerformed(evt);
            }
        });

        Send_Msg_Field_Client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_Msg_Field_ClientActionPerformed(evt);
            }
        });

        Client_Area.setEditable(false);
        Client_Area.setColumns(20);
        Client_Area.setRows(5);
        jScrollPane1.setViewportView(Client_Area);

        jLabel1.setText("IP And Port :");

        Port_IP_Field_Client.setText("IP:Port");
        Port_IP_Field_Client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Port_IP_Field_ClientActionPerformed(evt);
            }
        });

        Status_Field.setEditable(false);
        Status_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Status_FieldActionPerformed(evt);
            }
        });

        Establish_Connection_Button.setText("Connect");
        Establish_Connection_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Establish_Connection_ButtonActionPerformed(evt);
            }
        });

        Port_Details_Field.setEditable(false);
        Port_Details_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Port_Details_FieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Send_Msg_Field_Client)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Send_Button_Client)))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Port_Details_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Status_Field)
                                    .addComponent(Port_IP_Field_Client, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(Establish_Connection_Button)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(Port_IP_Field_Client, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Status_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Establish_Connection_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Port_Details_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Send_Msg_Field_Client, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Send_Button_Client)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Send_Msg_Field_ClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_Msg_Field_ClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Send_Msg_Field_ClientActionPerformed

    private void Send_Button_ClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_Button_ClientActionPerformed
        
         try 
        {
            
            String SendServerMsg ="";
            SendServerMsg = Send_Msg_Field_Client.getText().trim();      
            dataOutputStream.writeUTF(SendServerMsg);
            Send_Msg_Field_Client.setText("");
            
        } catch (IOException ex) {}
        
    }//GEN-LAST:event_Send_Button_ClientActionPerformed

    private void Status_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Status_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Status_FieldActionPerformed

    private void Port_IP_Field_ClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Port_IP_Field_ClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Port_IP_Field_ClientActionPerformed

    private void Establish_Connection_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Establish_Connection_ButtonActionPerformed
       
       if(Port_IP_Field_Client.getText()!=null)
       {
           String[] Port_IP=Port_IP_Field_Client.getText().split(":");
           
           IP = Port_IP[0];
           String[] Check_IP= IP.split(".");
           
           
           port=Integer.parseInt(Port_IP[1]);

         
                try {
                    socket = new Socket(IP,port);
                    Status_Field.setText("Connected");
                    Port_Details_Field.setText("Client Connected To: "+InetAddress.getByName(IP)+"  Port # "+socket.getPort());
                    Send_Button_Client.setEnabled(true);
                    dataInputStream = new DataInputStream(socket.getInputStream());
                    dataOutputStream =  new DataOutputStream(socket.getOutputStream());


                } catch (IOException ex) {
                    Status_Field.setText("Not Connected");
                }
           
          
       }
       
    }//GEN-LAST:event_Establish_Connection_ButtonActionPerformed

    private void Port_Details_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Port_Details_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Port_Details_FieldActionPerformed
    public static void chatClient(){
        
        String RecieveServerMsg="";
        while(!RecieveServerMsg.equals("exit"))            
            {
                
            try {
                RecieveServerMsg = dataInputStream.readUTF();
                Client_Area.setText(Client_Area.getText().trim()+"\n"+RecieveServerMsg);
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
                         
               
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
                Send_Button_Client.setEnabled(false);
            }
        });
        
        Timer timer = new Timer();
        timer.schedule(new TimerTask() 
        {
            public void run() {
            chatClient();
            }
        }, 20*1000);
        
       
   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea Client_Area;
    private javax.swing.JButton Establish_Connection_Button;
    private javax.swing.JTextField Port_Details_Field;
    private javax.swing.JTextField Port_IP_Field_Client;
    private static javax.swing.JButton Send_Button_Client;
    private javax.swing.JTextField Send_Msg_Field_Client;
    private static javax.swing.JTextField Status_Field;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
